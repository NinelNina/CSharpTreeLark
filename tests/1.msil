.assembly program
{
}
.class public Program
{
  .method public static int32 input_int(string name) cil managed
  {
    ldarg 0
    ldstr ""
    call bool [mscorlib]System.String::op_Inequality(string, string)
    brfalse L_0
    ldstr "¬ведите "
    ldarg 0
    call string class CompilerDemo.Runtime::concat(string, string)
    ldstr ": "
    call string class CompilerDemo.Runtime::concat(string, string)
    call void class CompilerDemo.Runtime::print(string)
    br L_1
  L_0:
  L_1:
    call string class CompilerDemo.Runtime::read()
    call int32 class CompilerDemo.Runtime::to_int(string)
    ret
  }
  .method public static float64 input_float(string name) cil managed
  {
    .locals init (string _v0, string _v1)
    ldarg 0
    stloc 0
    ldarg 0
    ldstr ""
    call bool [mscorlib]System.String::op_Inequality(string, string)
    brfalse L_2
    ldloc 0
    stloc 1
    ldstr "¬ведите "
    ldloc 1
    call string class CompilerDemo.Runtime::concat(string, string)
    ldstr ": "
    call string class CompilerDemo.Runtime::concat(string, string)
    call void class CompilerDemo.Runtime::print(string)
    br L_3
  L_2:
  L_3:
    call string class CompilerDemo.Runtime::read()
    call float64 class CompilerDemo.Runtime::to_float(string)
    ret
  }
  .method public static void main() cil managed
  {
    .locals init (int32 _v0, int32 _v1, int32 _v2, int32 _v3, int32 _v4, float64 _v5, float64 _v6, int32 _v7, int32 _v8, string _v9, int32 _v10)
    ldloc 0
    stloc 1
    ldc.i4 90
    stloc 2
  L_4:
    ldloc 0
    ldc.i4 3
    cgt
    brfalse L_5
    ldloc 0
    ldc.i4 1
    add
    stloc 3
    ldloc 3
    call string class CompilerDemo.Runtime::convert(int32)
    call void class CompilerDemo.Runtime::print(string)
    br L_4
  L_5:
    ldstr "a"
    call int32 class Program::input_int(string)
    stloc 4
    ldstr "b"
    call float64 class Program::input_float(string)
    stloc 5
    ldstr "c"
    call float64 class Program::input_float(string)
    stloc 6
    ldc.i4 0
    stloc 7
    ldc.i4 8
    stloc 8
  L_6:
    ldloc 7
    ldc.i4 5
    cgt
    ldc.i4.0
    ceq
    ldloc 0
    ldc.i4.0
    ceq
    ldc.i4.0
    ceq
    and
    brfalse L_13
  L_7:
    ldloc 4
    conv.r8
    ldloc 5
    clt
    brfalse L_12
    ldloc 4
    conv.r8
    ldc.i4 7
    conv.r8
    ldloc 5
    add
    cgt
    brfalse L_8
    ldloc 4
    conv.r8
    ldloc 5
    ldc.i4 2
    ldc.i4 1
    sub
    conv.r8
    mul
    add
    ldc.i4 0
    conv.r8
    add
    stloc 6
    ldstr "98	ура"
    stloc 9
    br L_11
  L_8:
    ldloc 4
    conv.r8
    ldloc 6
    cgt
    brfalse L_9
    ldloc 6
    ldc.i4 1
    conv.r8
    add
    call string class CompilerDemo.Runtime::convert(float64)
    ldstr " "
    call string class CompilerDemo.Runtime::concat(string, string)
    ldc.r8 89.89
    call string class CompilerDemo.Runtime::convert(float64)
    call string class CompilerDemo.Runtime::concat(string, string)
    call void class CompilerDemo.Runtime::print(string)
    br L_10
  L_9:
  L_10:
  L_11:
    br L_7
  L_12:
    ldloc 7
    ldc.i4 1
    add
    stloc 7
    ldc.i4 5
    call string class CompilerDemo.Runtime::convert(int32)
    call void class CompilerDemo.Runtime::print(string)
    br L_6
  L_13:
    ldc.i4 0
    stloc 10
    ret
  }
  
  .method public static void Main()
  {
    .entrypoint
    call void class Program::main()
    ret
  }
}
